(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{474:function(t,a,s){"use strict";s.r(a);var r=s(2),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("在上一章中讲解了 single-spa 中主应用的 API，主要是一些提供给用户、devtool 等的顶层 API。最重要的 API 包括  "),a("code",[t._v("registerApplication")]),t._v(" 、  "),a("code",[t._v("unregisterApplication")]),t._v("  等。这些内容实际上就是应用管理。")]),t._v(" "),a("p",[t._v("同时我们已经接触到微应用的生命周期，如 load、bootstrap、mount、update、unmount、unload 等。这一章中，我们来详细探讨 single-spa 中的微应用生命周期管理。")]),t._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("h3",{attrs:{id:"生命周期与微应用的行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期与微应用的行为"}},[t._v("#")]),t._v(" 生命周期与微应用的行为")]),t._v(" "),a("p",[t._v("s-spa 管理了微应用及其生命周期，这对于实现微前端的结构至关重要但不是全部，因为 s-spa 具有很强的可定制能力和灵活性，在生命周期中有很多微应用的行为和状态是可以由外界去维护的。qianKun 正是运用了这一点。")]),t._v(" "),a("p",[t._v("让微前端应用具有更多开箱即用的特性这正是 qianKun 所正在做的，在 qiqnKun 中，基于这样的生命周期的设计，它实现了更多如 JavaScript 沙箱、css 沙箱、模板解析、prefech、微应用内部的 hooks 等扩展功能。")]),t._v(" "),a("h2",{attrs:{id:"目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目标"}},[t._v("#")]),t._v(" 目标")]),t._v(" "),a("h2",{attrs:{id:"q-a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[t._v("#")]),t._v(" Q&A")])])}),[],!1,null,null,null);a.default=e.exports}}]);