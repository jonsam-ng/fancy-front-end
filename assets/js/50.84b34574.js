(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{422:function(t,s,n){"use strict";n.r(s);var e=n(2),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("Badges",{attrs:{content:[{type:"tip",text:"React17"},{type:"tip",text:"精简"}]}}),t._v(" "),s("TimeToRead"),t._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#目录"}},[t._v("目录")])]),s("li",[s("a",{attrs:{href:"#前言"}},[t._v("前言")])]),s("li",[s("a",{attrs:{href:"#renderrootsync"}},[t._v("renderRootSync")])]),s("li",[s("a",{attrs:{href:"#renderrootconcurrent"}},[t._v("renderRootConcurrent")])]),s("li",[s("a",{attrs:{href:"#workloopsync"}},[t._v("workLoopSync")])]),s("li",[s("a",{attrs:{href:"#workloopconcurrent"}},[t._v("workLoopConcurrent")])]),s("li",[s("a",{attrs:{href:"#performunitofwork"}},[t._v("performUnitOfWork")])]),s("li",[s("a",{attrs:{href:"#扩展"}},[t._v("扩展")]),s("ul",[s("li",[s("a",{attrs:{href:"#如何理解-workloop"}},[t._v("如何理解 WorkLoop?")])]),s("li",[s("a",{attrs:{href:"#如何理解-workloop-和-performunitofwork-的关系"}},[t._v("如何理解 workLoop 和 performUnitOfWork 的关系？")])])])]),s("li",[s("a",{attrs:{href:"#问题"}},[t._v("问题")]),s("ul",[s("li",[s("a",{attrs:{href:"#workinprogress-是如何初始化的"}},[t._v("workInProgress 是如何初始化的？")])])])]),s("li",[s("a",{attrs:{href:"#总结"}},[t._v("总结")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("在上一篇文章中，我们探讨了 React 调和器中  "),s("code",[t._v("scheduleSyncCallback")]),t._v(" 、 "),s("code",[t._v("scheduleCallback")]),t._v("  、 "),s("code",[t._v("performSyncWorkOnRoot")]),t._v("  和  "),s("code",[t._v("performConcurrentWorkOnRoot")]),t._v("  四个核心函数，概括而言，其作用是：同步任务和异步任务的调度和任务回调。在本篇文章中我们就沿着上文中任务回调的入口继续深入，探讨调和器中  "),s("code",[t._v("Render")]),t._v("  的过程。")]),t._v(" "),s("h2",{attrs:{id:"renderrootsync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#renderrootsync"}},[t._v("#")]),t._v(" renderRootSync")]),t._v(" "),s("p",[t._v("这个函数是在同步任务的回调的 Render 阶段调用，目的是对当前的 FiberRoot 进行渲染。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("这里所谓的渲染，并不是浏览器的渲染，即将 VDOM 转化为 DOM 并绘制到浏览器的过程。需要注意的是，此处 "),s("code",[t._v("Render")]),t._v("  过程，指的是 React 内部的 ExecutionContext 中的  "),s("code",[t._v("RenderContext")]),t._v(" ， 即渲染过程实际上是一棵 "),s("strong",[t._v("FiberTree 真正调和的过程")]),t._v("。所谓调和，就是新的 FiberTree 替代旧的 FiberTree，成为 currentFiberTree 的过程（FiberTree 的双缓存结构，后文详述）。而真正将 VDOM 转化为 DOM（或者 Render String），则是在  "),s("code",[t._v("Commit")]),t._v("  过程之后完成的。")])]),t._v(" "),s("p",[t._v("下面我们来看下源码：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/react/packages/react-reconciler/src/ReactFiberWorkLoop.new.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("renderRootSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("root")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" FiberRoot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lanes")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Lanes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevExecutionContext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" executionContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// executionContext 添加 RenderContext")]),t._v("\n  executionContext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" RenderContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更改当前 dispatcher 为 contextOnlyDispatcher，并且返回原来的 dispatcher")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevDispatcher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushDispatcher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 启动 workLoop")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoopSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thrownValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thrownValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Render 阶段结束，恢复之后的 dispatcher")]),t._v("\n  executionContext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevExecutionContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("popDispatcher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevDispatcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set this to null to indicate there's no in-progress render.")]),t._v("\n  workInProgressRoot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  workInProgressRootRenderLanes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" workInProgressRootExitStatus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br")])]),s("p",[t._v("这里有几点核心的内容：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("workLoopSync")]),t._v("  开启了一个渲染循环，这样一个循环就体现在遍历的思想上，是对 FiberTree 进行一个深度优先遍历（DFS）。我们将在后文进行详细的探讨。")]),t._v(" "),s("li",[t._v("返回  "),s("code",[t._v("workInProgressRootExitStatus")]),t._v("  是在整个  "),s("code",[t._v("src/react/packages/react-reconciler/src/ReactFiberWorkLoop.new.js")]),t._v("  文件中维护的，也就是在整个  "),s("code",[t._v("ReactFiberWorkLoop")]),t._v("  中维护的。在 workLoop 的执行过程中， "),s("code",[t._v("exitStatus")]),t._v("  总能保持最新的执行状态。")]),t._v(" "),s("li",[t._v("在执行到  "),s("code",[t._v("renderRootSync")]),t._v("  函数中时， "),s("code",[t._v("executionContext")]),t._v("  被更新到  "),s("code",[t._v("RenderContext")]),t._v("  状态。这里有位运算的内容，详细可参见"),s("RouterLink",{attrs:{to:"/react/tour/react-reconciliation-1/#位运算怎么理解"}},[t._v("位运算怎么理解？")]),t._v("。")],1)]),t._v(" "),s("p",[t._v("另外，还有一些值得注意的问题：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("pushDispatcher")]),t._v("  和  "),s("code",[t._v("popDispatcher")]),t._v("  是在做什么？dispatcher 实际上是和 hook 相关的内容，在  "),s("code",[t._v("pushDispatcher")]),t._v("  中将  "),s("code",[t._v("ReactCurrentDispatcher.current")]),t._v("  设置为  "),s("code",[t._v("ContextOnlyDispatcher")]),t._v(" ，这种状态下的 hook 在调用时会报错。这是因为 hook 在  "),s("code",[t._v("Render")]),t._v("  阶段是不可调用的。我们在 hook 原理相关的章节会详细介绍。")]),t._v(" "),s("li",[t._v("在执行完  "),s("code",[t._v("Render")]),t._v("  过程之后， "),s("code",[t._v("executionContext")]),t._v("  恢复了之前的状态，即  "),s("code",[t._v("Batch")]),t._v("  状态。这也是为什么在进入  "),s("code",[t._v("Render")]),t._v("  状态和  "),s("code",[t._v("Commit")]),t._v("  状态之前都要检查是否不是已经处于这两种状态。")])]),t._v(" "),s("h2",{attrs:{id:"renderrootconcurrent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#renderrootconcurrent"}},[t._v("#")]),t._v(" renderRootConcurrent")]),t._v(" "),s("p",[t._v("这个函数是在异步任务的回调的  "),s("code",[t._v("Render")]),t._v("  阶段调用，目的是对当前的 FiberRoot 进行渲染。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/react/packages/react-reconciler/src/ReactFiberWorkLoop.new.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("renderRootConcurrent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("root")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" FiberRoot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lanes")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Lanes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevExecutionContext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" executionContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  executionContext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" RenderContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevDispatcher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushDispatcher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoopConcurrent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thrownValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thrownValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("popDispatcher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevDispatcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  executionContext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevExecutionContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set this to null to indicate there's no in-progress render.")]),t._v("\n  workInProgressRoot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  workInProgressRootRenderLanes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Return the final exit status.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" workInProgressRootExitStatus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br")])]),s("p",[t._v("总体流程与  "),s("code",[t._v("renderRootSync")]),t._v("  一致，只是在 workLoop 函数使用了  "),s("code",[t._v("workLoopConcurrent")]),t._v(" 。不再赘述。")]),t._v(" "),s("p",[t._v("另外，我们来探讨下这里的错误处理机制，即  "),s("code",[t._v("handleError")]),t._v("  函数。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/react/packages/react-reconciler/src/ReactFiberWorkLoop.new.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thrownValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前的 workInProgress 即为出错的 Fiber")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" erroredWork "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("erroredWork "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" erroredWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Expected to be working on a non-root fiber. This is a fatal error")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// because there's no ancestor that can handle it; the root is")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// supposed to capture all errors that weren't caught by an error")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// boundary.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是一个致命错误，因为这是一个没有父节点的 Fiber。因此，此 Fiber 上出现的错误不可冒泡处理。")]),t._v("\n        workInProgressRootExitStatus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" RootFatalErrored"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        workInProgressRootFatalError "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" thrownValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        workInProgress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("throwException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        erroredWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        erroredWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        thrownValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        workInProgressRootRenderLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结束 workLoop")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeUnitOfWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("erroredWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("yetAnotherThrownValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Return to the normal work loop.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br")])]),s("ul",[s("li",[t._v("如果发生错误的 Fiber 没有父节点则为致命错误，因为无法通过冒泡机制找到捕获错误的目标。")]),t._v(" "),s("li",[t._v("如果是普通错误，则结束本次 Fiber Work （当前 Fiber 上的调和工作）。")])]),t._v(" "),s("h2",{attrs:{id:"workloopsync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#workloopsync"}},[t._v("#")]),t._v(" workLoopSync")]),t._v(" "),s("p",[t._v("对于同步渲染的 WorkLoop 而言，只需判断  "),s("code",[t._v("workInProgress")]),t._v("  （表示当前正在处理（调和）的 Fiber，即 workInProgress Fiber）不是悬空的即可。不必判断是否是  "),s("code",[t._v("shouldYield")]),t._v("  的时机，因为同步渲染具有最高的优先级，当做 TimeOut 的任务来看待。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[s("strong",[t._v("悬空")]),t._v("本身是指针的概念， "),s("code",[t._v("workInProgress")]),t._v("  表示当前正在处理的 FiberNode 的"),s("strong",[t._v("引用")]),t._v("，本质上也是 “指针”，故采用此说法。")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/react/packages/react-reconciler/src/ReactFiberWorkLoop.new.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The work loop is an extremely hot path. Tell Closure not to inline it.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** @noinline */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoopSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Already timed out, so perform work without checking if we need to yield.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("这里的  "),s("code",[t._v("while loop")]),t._v("  体现的就是  "),s("code",[t._v("work loop")]),t._v("  的思想，即是对 workInProgress FiberTree 数据结构的遍历过程（后文详述）， "),s("code",[t._v("performUnitOfWork")]),t._v("  则是体现为在  "),s("code",[t._v("traverse")]),t._v("  的过程中对当前的 FiberNode 进行操作（Work）的过程。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("traverse 遍历")]),t._v(" "),s("p",[s("code",[t._v("traverse")]),t._v("  的概念来源于编译原理中 "),s("code",[t._v("compile")]),t._v(" （编译）、 "),s("code",[t._v("traverse")]),t._v(" （遍历）、 "),s("code",[t._v("generate")]),t._v(" （生成）的三个步骤。这里的遍历是指将对 FiberTree 的数据结构进行遍历，并且对 FiberNode 进行处理的过程。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("@noinline annotation")]),t._v(" "),s("p",[t._v("编译注解其实就是在编译时进行一些特殊的操作，很多是针对 Java 的概念提出的。注解针对普通的类、变量、方法等，能让编译器支持特殊的操作。注解通常使用的场景是类、方法、字段、局部变量和参数等。")]),t._v(" "),s("ul",[s("li",[t._v("@inline：标记编译器内联；")]),t._v(" "),s("li",[t._v("@noinline：标记编译器不要内联，防止因优化器过于智能而过度优化，反而伤害效能。")])]),t._v(" "),s("p",[t._v("由于在 WHILE 循环中， "),s("code",[t._v("performUnitOfWork")]),t._v("  会反复被调用，属于是  "),s("code",[t._v("hot path")]),t._v(" ， "),s("code",[t._v("@noinline")]),t._v("  的标记告知 JavaScript 编译器，不要将即函数做内联优化处理，以免过度优化伤害程序性能。")]),t._v(" "),s("p",[s("strong",[t._v("参考：")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://ariya.io/2013/04/automatic-inlining-in-javascript-engines",target:"_blank",rel:"noopener noreferrer"}},[t._v("Automatic Inlining in JavaScript Engines · ariya.io"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://floitsch.blogspot.com/2012/03/optimizing-for-v8-inlining.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Optimizing for V8 - Inlining, Deoptimizations | Codegen::RecordSafepoint"),s("OutboundLink")],1)])])]),t._v(" "),s("h2",{attrs:{id:"workloopconcurrent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#workloopconcurrent"}},[t._v("#")]),t._v(" workLoopConcurrent")]),t._v(" "),s("p",[t._v("对于异步渲染的 WorkLoop 而言，除了需要确保  "),s("code",[t._v("workInProgress")]),t._v("  不能悬空之外，还需要确保调度器没有更高优先级的回调，即  "),s("code",[t._v("shouldYield")]),t._v(" 。如果调度器需要打断本次回调，则放弃此次 WorkLoop。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/react/packages/react-reconciler/src/ReactFiberWorkLoop.new.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** @noinline */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoopConcurrent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Perform work until Scheduler asks us to yield")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldYield")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("还需要注意的是，无论是同步渲染还是异步渲染的 WorkLoop 都是通过  "),s("code",[t._v("performUnitOfWork")]),t._v("  来处理的。这是因为所谓同步和异步渲染的区别，归根结底是请求渲染时机的区别，而真正的 WorkLoop 的过程（渲染过程，即调和过程）是一样的。")]),t._v(" "),s("p",[t._v("shouldYield：即 shouldYieldToHost，用于判断是否有任务超时，需要打断调和过程，重新回调。")]),t._v(" "),s("h2",{attrs:{id:"performunitofwork"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#performunitofwork"}},[t._v("#")]),t._v(" performUnitOfWork")]),t._v(" "),s("p",[t._v("在上文中，我们探讨了同步渲染和异步渲染时如何通过调度器的回调（注：此处是简便说法，同步调度实际上是不通过调度器回调的，后文将沿用此说法，且不再重复说明）来启动 WorkLoop 的，而且了解到 WorkLoop  是通过  "),s("code",[t._v("performUnitOfWork")]),t._v("  以在  "),s("code",[t._v("traverse")]),t._v("  过程中对 FiberNode 进行  "),s("code",[t._v("Work")]),t._v("  的。下面我们就来详细探讨  "),s("code",[t._v("performUnitOfWork")]),t._v("  函数，了解此函数是如何遍历 FiberTree 并且对 FiberNode 进行调和的。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/react/packages/react-reconciler/src/ReactFiberWorkLoop.new.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("unitOfWork")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The current, flushed, state of this fiber is the alternate. ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 Fiber 在 currentFiberTree 上的当前渲染版本的 Fiber")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unitOfWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调和 Fiber，并返回下一个需要调和的 Fiber（DFS）")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unitOfWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subtreeRenderLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 pendingProps 缓存到 memoizedProps，因为此 Fiber 已经调和完毕")]),t._v("\n  unitOfWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unitOfWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If this doesn't spawn new work, complete the current work.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果没有下一个 Fiber 需要调和，则捕获完毕开始冒泡")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeUnitOfWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unitOfWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// workInProgress 指针移动到下一个需要调和的 Fiber")]),t._v("\n    workInProgress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReactCurrentOwner.current 是指当前正处于构建过程中的组件。")]),t._v("\n  ReactCurrentOwner"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br")])]),s("p",[t._v("有以下的问题需要重点关注一下：")]),t._v(" "),s("ol",[s("li",[t._v("Fiber 的结构。理解 Fiber 的结构对于理解此函数至关重要。在前文关于  "),s("code",[t._v("Fiber 和调和基础")]),t._v(" 的探讨中，我们已经知道了 Fiber 具有如下的结构：")])]),t._v(" "),s("div",{staticClass:"language-ts line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fiber")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个Fiber 的版本池，每个更新的 fiber 都会有一个相对的 alternate fiber。")]),t._v("\n  alternate"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Input is the data coming into process this fiber. Arguments. Props.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前 work-in-progress 的组件 props。")]),t._v("\n  pendingProps"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 缓存之前的组件的 props。")]),t._v("\n  memoizedProps"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("当前的 WorkLoop 处理的是 WorkInProgress FiberTree，因此， "),s("code",[t._v("unitOfWork")]),t._v("  指的是 WorkInProgress FiberNode。另外，根据 FiberTree 的双缓存的结构， "),s("code",[t._v("unitOfWork.alternate")]),t._v("  指向的是 currentFiberTree 上与之相对应的 FiberNode。简单理解之， "),s("code",[t._v("current")]),t._v("  是当前已经渲染的稳定的 FiberNode， "),s("code",[t._v("unitOfWork")]),t._v("  是即将要渲染的需要调和的 FiberNode。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("调用  "),s("code",[t._v("beginWork")]),t._v("  调和当前 Fiber 节点， "),s("code",[t._v("completeUnitOfWork")]),t._v("  完成 Fiber 的调和过程（从 beginWork 到 completeWork 的过程）。注意 "),s("code",[t._v("next === null")]),t._v("  是从捕获到冒泡的转折点，并不是要退出 WorkLoop。")]),t._v(" "),s("li",[t._v("指针的移动： "),s("code",[t._v("beginWork")]),t._v("  会返回下一个需要被调和的 FiberNode， "),s("code",[t._v("workInProgress")]),t._v("  会指向该节点，在 WorkLoop 中继续完成调和过程。如果没有下一个需要调和的节点，说明已经遍历到叶子节点，此时转入冒泡过程，转而执行  "),s("code",[t._v("completeUnitOfWork")]),t._v(" 。")]),t._v(" "),s("li",[s("code",[t._v("ReactCurrentOwner.current")]),t._v("  的含义： "),s("code",[t._v("ReactCurrentOwner.current")]),t._v("  是指当前正处于构建过程中的组件。这个变量实际上相当于是一个存在于 React 作用域全局的一个缓存变量。")]),t._v(" "),s("li",[t._v("从  "),s("code",[t._v("performUnitOfWork")]),t._v("  开始，将不在遵循兵分两路的方式，即同步模式和异步模式（上文常提到同步调度和异步调度，同步渲染和异步渲染。）需要注意的是，这里提到的同步和异步表示一种属性而非方式，是一种优先级高低的体现，即调度是同步的或者说渲染是同步的，与编程中 "),s("code",[t._v("同步执行和异步执行")]),t._v(" 的概念不同。渲染本身并无同步异步之分，渲染的时机（由优先级控制）才有同步和异步之别。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("ReactCurrentOwner.current为什么重要?")]),t._v(" "),s("p",[t._v("因为它是自定义节点的指针。所有的 ReactCompositeComponent 最终 render 之后都变成了干干净净的 ReactDomComponent 节点组成的 DOM 树，但是如何分辨哪些是 ReactCompositeComponent 生成的呢？这就依赖这些 ReactDomComponent 节点上的 owner 变量。而 "),s("code",[t._v("ReactCurrentOwner.current")]),t._v("  正是维护这个在构建虚拟 DOM 过程中，随时会变动的变量的临时保存位置所在。")]),t._v(" "),s("p",[t._v("这个值会被缓存到 ReactElement.__owner 中。")]),t._v(" "),s("p",[s("strong",[t._v("参考：")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://que01.top/2019/06/28/react-ReactCurrentOwner/",target:"_blank",rel:"noopener noreferrer"}},[t._v("React ReactCurrentOwner | Que's Blog"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/react/tour/react-basic-element/#owner-是如何连接-reactelement-和-fiber-的-owner-有什么作用"}},[t._v("_owner 是如何连接 ReactElement 和 Fiber 的？_owner 有什么作用？")])],1)])]),t._v(" "),s("h2",{attrs:{id:"扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[t._v("#")]),t._v(" 扩展")]),t._v(" "),s("h3",{attrs:{id:"如何理解-workloop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何理解-workloop"}},[t._v("#")]),t._v(" 如何理解 WorkLoop?")]),t._v(" "),s("p",[t._v("从过程来来看，WorkLoop 是对 workInProgress FiberTree 的遍历与回溯（捕获和冒泡）的过程，在此二者过程中，分别对 FiberNode 做 beginWork 和 completeWork 的工作，以达到挂载、更新和标记  "),s("code",[t._v("EffectTag")]),t._v(" （后文可能会直接称之为 ETag） 的目的。")]),t._v(" "),s("p",[t._v("从功能上来看，WorkLoop 的目的是对 workInProgress FiberTree 进行调和（针对 VDOM 的组件的挂载和更新，针对 DOM 转化的 ETag 的标记），这是一次从 workInProgress FiberTree 到 current FiberTree 的构造、加工和飞跃的过程。WorkLoop 的工作是  "),s("code",[t._v("Render")]),t._v("  阶段的核心工作，也是实质性的工作，这为  "),s("code",[t._v("fiberRoot.current")]),t._v("  的迁移工作打下了夯实的基础。")]),t._v(" "),s("p",[t._v("下面是一次从 RootFiber 开始的 WorkLoop 的过程，您可以根据此图了解 FiberTree 的结构以及 WorkLoop 捕获与冒泡的过程。关于  "),s("code",[t._v("WorkLoop")]),t._v("  的详细的工作流程，在后文中会进行更详细的探讨。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/drawio/capture_bubble_render_fiber_tree.drawio.svg"),alt:"search-react-code","data-zoomable":""}}),t._v(" "),s("h3",{attrs:{id:"如何理解-workloop-和-performunitofwork-的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何理解-workloop-和-performunitofwork-的关系"}},[t._v("#")]),t._v(" 如何理解  "),s("code",[t._v("workLoop")]),t._v("  和  "),s("code",[t._v("performUnitOfWork")]),t._v("  的关系？")]),t._v(" "),s("p",[t._v("workLoop 是整个调和工作的控制器，是控制遍历 FiberTree 的引擎，也可以称之为"),s("strong",[t._v("调和工厂")]),t._v("，相应的， "),s("code",[t._v("performUnitOfWork")]),t._v("  是调和 FiberNode 的具体工作者，也可以称之为调和工作的"),s("strong",[t._v("工人")]),t._v("，具体控制着  "),s("code",[t._v("beginWork")]),t._v("  和  "),s("code",[t._v("completeWork")]),t._v("  的职责。二者在 FiberTree 这个指针结构的协助下，共同完成调和 FiberTree 的任务。")]),t._v(" "),s("p",[t._v("在  "),s("code",[t._v("performUnitOfWork")]),t._v("  和  "),s("code",[t._v("workLoopConcurrent")]),t._v("  中添加  "),s("code",[t._v("@noinline")]),t._v("  的非内联标记，也能体现这一思想。因为对于  "),s("code",[t._v("workLoop")]),t._v("  而言， "),s("code",[t._v("performUnitOfWork")]),t._v("  必然是多实例的，内联编译则破坏了这一思路。虽然非内联函数在函数的启动、缓存时必然耗费了更多的内存，但是这样反而是正确的方式，这是因为空间换时间的方式能够提高程序的执行效率。")]),t._v(" "),s("h2",{attrs:{id:"问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),s("h3",{attrs:{id:"workinprogress-是如何初始化的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#workinprogress-是如何初始化的"}},[t._v("#")]),t._v(" workInProgress 是如何初始化的？")]),t._v(" "),s("p",[t._v("我们可能会有这样的疑问， "),s("code",[t._v("workInProgress")]),t._v("  在应用挂载时是悬空的，而在  "),s("code",[t._v("WorkLoop")]),t._v("  中确是对  "),s("code",[t._v("workInProgress")]),t._v("  进行操作，那么  "),s("code",[t._v("workInProgress")]),t._v("  是如何初始化的呢？")]),t._v(" "),s("p",[t._v("事实上，在  "),s("code",[t._v("renderRootSync")]),t._v("  和  "),s("code",[t._v("renderRootConcurrent")]),t._v("  中都有如下的一段逻辑：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If the root or lanes have changed, throw out the existing stack")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// and prepare a fresh one. Otherwise we'll continue where we left off.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgressRoot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" workInProgressRootRenderLanes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" lanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareFreshStack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareFreshStack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("root")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" FiberRoot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lanes")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Lanes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n  workInProgressRoot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  workInProgress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createWorkInProgress")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  workInProgressRootRenderLanes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" subtreeRenderLanes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgressRootIncludedLanes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("如果  "),s("code",[t._v("workInProgressRoot")]),t._v("  即当前处理的 FiberTree 的根节点（或者渲染优先级）发生了变化，则清理  "),s("code",[t._v("workInProgressStack")]),t._v("  的内容，包括重新创建  "),s("code",[t._v("workInProgress")]),t._v("  节点。因此在应用挂载时， "),s("code",[t._v("workInProgress")]),t._v("  实际上是根据  "),s("code",[t._v("root.current")]),t._v("  的 FiberNode 而创建的。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("通过本篇文章的探讨，有如下的重点内容需要关注：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Render")]),t._v("  的过程本质上是  "),s("code",[t._v("WorkLoop")]),t._v("  的过程， "),s("code",[t._v("WorkLoop")]),t._v("  的错误处理具有较好的容错度。")]),t._v(" "),s("li",[s("code",[t._v("workLoopSync")]),t._v("  和  "),s("code",[t._v("workLoopConcurrent")]),t._v("  本质上都是捕获和冒泡调和 FiberTree 的过程， 也都是通过  "),s("code",[t._v("performUnitOfWork")]),t._v("  函数调和 FiberNode。二者唯一的不同是跳出时机的不同， "),s("code",[t._v("workLoopConcurrent")]),t._v("  除了要判断  "),s("code",[t._v("workInProgress")]),t._v("  未悬空之外，还需要判断调度器是否需要打断调和过程。")]),t._v(" "),s("li",[s("code",[t._v("performUnitOfWork")]),t._v("  独立控制着  "),s("code",[t._v("beginWork")]),t._v("  和  "),s("code",[t._v("completeWork")]),t._v("  即  "),s("code",[t._v("completeUnitOfWork")]),t._v("  的流程。")])])],1)}),[],!1,null,null,null);s.default=a.exports}}]);