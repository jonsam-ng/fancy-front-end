(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{479:function(t,e,n){"use strict";n.r(e);var o=n(2),s=Object(o.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("在上一章  "),e("code",[t._v("lifecycles生命周期管理")]),t._v("  的内容中，我们探讨到了 single-spa 的微应用生命周期的管理，包括 bootstrap 初始化应用、mount 和 unmount、load 和 unload、update 更新应用。在这些生命周期中，最重要的就是要执行外界传入的应用的生命周期钩子去完成微应用的行为变化，同时在 s-spa 内部去管理应用和应用的生命周期。")]),t._v(" "),e("p",[t._v("在这一章中，我们将探讨 single-spa 路由管理的原因，这也是微前端中极其重要的一环。从导出看，源码导出了  "),e("code",[t._v("navigateToUrl")]),t._v("  和  "),e("code",[t._v("triggerAppChange")]),t._v("  两个路由相关的 API。本章将以此如突破口进行探讨。")])])}),[],!1,null,null,null);e.default=s.exports}}]);